/*
 * generated by Xtext 2.10.0
 */
package org.xtext.univ.nantes.master.dsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.univ.nantes.master.dsl.ide.contentassist.antlr.internal.InternalAgendaParser;
import org.xtext.univ.nantes.master.dsl.services.AgendaGrammarAccess;

public class AgendaParser extends AbstractContentAssistParser {

	@Inject
	private AgendaGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalAgendaParser createParser() {
		InternalAgendaParser result = new InternalAgendaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEVENTS_OR_TASKSAccess().getAlternatives(), "rule__EVENTS_OR_TASKS__Alternatives");
					put(grammarAccess.getAGENDAAccess().getGroup(), "rule__AGENDA__Group__0");
					put(grammarAccess.getPREAMBULEAccess().getGroup(), "rule__PREAMBULE__Group__0");
					put(grammarAccess.getCONTENUAccess().getGroup(), "rule__CONTENU__Group__0");
					put(grammarAccess.getDESCRIPTIONAccess().getGroup(), "rule__DESCRIPTION__Group__0");
					put(grammarAccess.getEVENTAccess().getGroup(), "rule__EVENT__Group__0");
					put(grammarAccess.getCONTENT_EVENTAccess().getGroup(), "rule__CONTENT_EVENT__Group__0");
					put(grammarAccess.getTASKAccess().getGroup(), "rule__TASK__Group__0");
					put(grammarAccess.getTASKAccess().getGroup_2(), "rule__TASK__Group_2__0");
					put(grammarAccess.getAGENDAAccess().getPreamAssignment_0(), "rule__AGENDA__PreamAssignment_0");
					put(grammarAccess.getAGENDAAccess().getContenuAssignment_2(), "rule__AGENDA__ContenuAssignment_2");
					put(grammarAccess.getPREAMBULEAccess().getNameAssignment_1(), "rule__PREAMBULE__NameAssignment_1");
					put(grammarAccess.getCONTENUAccess().getDescAssignment_0(), "rule__CONTENU__DescAssignment_0");
					put(grammarAccess.getCONTENUAccess().getEvtaAssignment_1(), "rule__CONTENU__EvtaAssignment_1");
					put(grammarAccess.getDESCRIPTIONAccess().getDescriptionAssignment_1(), "rule__DESCRIPTION__DescriptionAssignment_1");
					put(grammarAccess.getEVENTS_OR_TASKSAccess().getEvent_or_taskAssignment_0(), "rule__EVENTS_OR_TASKS__Event_or_taskAssignment_0");
					put(grammarAccess.getEVENTAccess().getNameAssignment_1(), "rule__EVENT__NameAssignment_1");
					put(grammarAccess.getEVENTAccess().getContent_eventAssignment_3(), "rule__EVENT__Content_eventAssignment_3");
					put(grammarAccess.getCONTENT_EVENTAccess().getPlaceAssignment_1(), "rule__CONTENT_EVENT__PlaceAssignment_1");
					put(grammarAccess.getCONTENT_EVENTAccess().getDataAssignment_3(), "rule__CONTENT_EVENT__DataAssignment_3");
					put(grammarAccess.getCONTENT_EVENTAccess().getStartAssignment_5(), "rule__CONTENT_EVENT__StartAssignment_5");
					put(grammarAccess.getCONTENT_EVENTAccess().getEndAssignment_7(), "rule__CONTENT_EVENT__EndAssignment_7");
					put(grammarAccess.getTASKAccess().getNameAssignment_1(), "rule__TASK__NameAssignment_1");
					put(grammarAccess.getTASKAccess().getNameEventAssignment_2_1(), "rule__TASK__NameEventAssignment_2_1");
					put(grammarAccess.getTASKAccess().getDeadlineAssignment_5(), "rule__TASK__DeadlineAssignment_5");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalAgendaParser typedParser = (InternalAgendaParser) parser;
			typedParser.entryRuleAGENDA();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AgendaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AgendaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
