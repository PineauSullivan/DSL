/*
 * generated by Xtext 2.10.0
 */
package org.xtext.univ.nantes.master.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.univ.nantes.master.dsl.agenda.AGENDA;
import org.xtext.univ.nantes.master.dsl.agenda.AgendaPackage;
import org.xtext.univ.nantes.master.dsl.agenda.EVENT;
import org.xtext.univ.nantes.master.dsl.agenda.MODEL;
import org.xtext.univ.nantes.master.dsl.agenda.TASK;
import org.xtext.univ.nantes.master.dsl.services.AgendaGrammarAccess;

@SuppressWarnings("all")
public class AgendaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AgendaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AgendaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AgendaPackage.AGENDA:
				sequence_AGENDA(context, (AGENDA) semanticObject); 
				return; 
			case AgendaPackage.EVENT:
				sequence_EVENT(context, (EVENT) semanticObject); 
				return; 
			case AgendaPackage.MODEL:
				sequence_MODEL(context, (MODEL) semanticObject); 
				return; 
			case AgendaPackage.TASK:
				sequence_TASK(context, (TASK) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     TYPE returns AGENDA
	 *     AGENDA returns AGENDA
	 *
	 * Constraint:
	 *     (name=ID description=STRING event+=EVENT* task+=TASK*)
	 */
	protected void sequence_AGENDA(ISerializationContext context, AGENDA semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EVENT returns EVENT
	 *
	 * Constraint:
	 *     (name=ID place=STRING date=STRING start=STRING end=STRING)
	 */
	protected void sequence_EVENT(ISerializationContext context, EVENT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AgendaPackage.Literals.EVENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AgendaPackage.Literals.EVENT__NAME));
			if (transientValues.isValueTransient(semanticObject, AgendaPackage.Literals.EVENT__PLACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AgendaPackage.Literals.EVENT__PLACE));
			if (transientValues.isValueTransient(semanticObject, AgendaPackage.Literals.EVENT__DATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AgendaPackage.Literals.EVENT__DATE));
			if (transientValues.isValueTransient(semanticObject, AgendaPackage.Literals.EVENT__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AgendaPackage.Literals.EVENT__START));
			if (transientValues.isValueTransient(semanticObject, AgendaPackage.Literals.EVENT__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AgendaPackage.Literals.EVENT__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEVENTAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEVENTAccess().getPlaceSTRINGTerminalRuleCall_4_0(), semanticObject.getPlace());
		feeder.accept(grammarAccess.getEVENTAccess().getDateSTRINGTerminalRuleCall_6_0(), semanticObject.getDate());
		feeder.accept(grammarAccess.getEVENTAccess().getStartSTRINGTerminalRuleCall_8_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getEVENTAccess().getEndSTRINGTerminalRuleCall_10_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MODEL returns MODEL
	 *
	 * Constraint:
	 *     List+=TYPE+
	 */
	protected void sequence_MODEL(ISerializationContext context, MODEL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TASK returns TASK
	 *
	 * Constraint:
	 *     (name=ID refEvent=[EVENT|ID]? deadline=STRING)
	 */
	protected void sequence_TASK(ISerializationContext context, TASK semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
