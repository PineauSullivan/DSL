/**
 * generated by Xtext 2.10.0
 */
package org.xtext.univ.nantes.master.dsl.agenda.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.univ.nantes.master.dsl.agenda.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.univ.nantes.master.dsl.agenda.AgendaPackage
 * @generated
 */
public class AgendaAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AgendaPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AgendaAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = AgendaPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AgendaSwitch<Adapter> modelSwitch =
    new AgendaSwitch<Adapter>()
    {
      @Override
      public Adapter caseAGENDA(AGENDA object)
      {
        return createAGENDAAdapter();
      }
      @Override
      public Adapter casePREAMBULE(PREAMBULE object)
      {
        return createPREAMBULEAdapter();
      }
      @Override
      public Adapter caseCONTENU(CONTENU object)
      {
        return createCONTENUAdapter();
      }
      @Override
      public Adapter caseDESCRIPTION(DESCRIPTION object)
      {
        return createDESCRIPTIONAdapter();
      }
      @Override
      public Adapter caseEVENTS_OR_TASKS(EVENTS_OR_TASKS object)
      {
        return createEVENTS_OR_TASKSAdapter();
      }
      @Override
      public Adapter caseEVENT(EVENT object)
      {
        return createEVENTAdapter();
      }
      @Override
      public Adapter caseCONTENT_EVENT(CONTENT_EVENT object)
      {
        return createCONTENT_EVENTAdapter();
      }
      @Override
      public Adapter caseTASK(TASK object)
      {
        return createTASKAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.univ.nantes.master.dsl.agenda.AGENDA <em>AGENDA</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.univ.nantes.master.dsl.agenda.AGENDA
   * @generated
   */
  public Adapter createAGENDAAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.univ.nantes.master.dsl.agenda.PREAMBULE <em>PREAMBULE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.univ.nantes.master.dsl.agenda.PREAMBULE
   * @generated
   */
  public Adapter createPREAMBULEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.univ.nantes.master.dsl.agenda.CONTENU <em>CONTENU</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.univ.nantes.master.dsl.agenda.CONTENU
   * @generated
   */
  public Adapter createCONTENUAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.univ.nantes.master.dsl.agenda.DESCRIPTION <em>DESCRIPTION</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.univ.nantes.master.dsl.agenda.DESCRIPTION
   * @generated
   */
  public Adapter createDESCRIPTIONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.univ.nantes.master.dsl.agenda.EVENTS_OR_TASKS <em>EVENTS OR TASKS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.univ.nantes.master.dsl.agenda.EVENTS_OR_TASKS
   * @generated
   */
  public Adapter createEVENTS_OR_TASKSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.univ.nantes.master.dsl.agenda.EVENT <em>EVENT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.univ.nantes.master.dsl.agenda.EVENT
   * @generated
   */
  public Adapter createEVENTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.univ.nantes.master.dsl.agenda.CONTENT_EVENT <em>CONTENT EVENT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.univ.nantes.master.dsl.agenda.CONTENT_EVENT
   * @generated
   */
  public Adapter createCONTENT_EVENTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.univ.nantes.master.dsl.agenda.TASK <em>TASK</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.univ.nantes.master.dsl.agenda.TASK
   * @generated
   */
  public Adapter createTASKAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //AgendaAdapterFactory
