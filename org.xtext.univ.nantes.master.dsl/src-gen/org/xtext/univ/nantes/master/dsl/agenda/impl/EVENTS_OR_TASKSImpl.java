/**
 * generated by Xtext 2.10.0
 */
package org.xtext.univ.nantes.master.dsl.agenda.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.univ.nantes.master.dsl.agenda.AgendaPackage;
import org.xtext.univ.nantes.master.dsl.agenda.EVENT;
import org.xtext.univ.nantes.master.dsl.agenda.EVENTS_OR_TASKS;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>EVENTS OR TASKS</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.univ.nantes.master.dsl.agenda.impl.EVENTS_OR_TASKSImpl#getEvent_or_task <em>Event or task</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EVENTS_OR_TASKSImpl extends MinimalEObjectImpl.Container implements EVENTS_OR_TASKS
{
  /**
   * The cached value of the '{@link #getEvent_or_task() <em>Event or task</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvent_or_task()
   * @generated
   * @ordered
   */
  protected EList<EVENT> event_or_task;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EVENTS_OR_TASKSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AgendaPackage.Literals.EVENTS_OR_TASKS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<EVENT> getEvent_or_task()
  {
    if (event_or_task == null)
    {
      event_or_task = new EObjectContainmentEList<EVENT>(EVENT.class, this, AgendaPackage.EVENTS_OR_TASKS__EVENT_OR_TASK);
    }
    return event_or_task;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AgendaPackage.EVENTS_OR_TASKS__EVENT_OR_TASK:
        return ((InternalEList<?>)getEvent_or_task()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AgendaPackage.EVENTS_OR_TASKS__EVENT_OR_TASK:
        return getEvent_or_task();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AgendaPackage.EVENTS_OR_TASKS__EVENT_OR_TASK:
        getEvent_or_task().clear();
        getEvent_or_task().addAll((Collection<? extends EVENT>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AgendaPackage.EVENTS_OR_TASKS__EVENT_OR_TASK:
        getEvent_or_task().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AgendaPackage.EVENTS_OR_TASKS__EVENT_OR_TASK:
        return event_or_task != null && !event_or_task.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //EVENTS_OR_TASKSImpl
