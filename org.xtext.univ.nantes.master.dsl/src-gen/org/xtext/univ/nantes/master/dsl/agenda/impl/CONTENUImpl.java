/**
 * generated by Xtext 2.10.0
 */
package org.xtext.univ.nantes.master.dsl.agenda.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.univ.nantes.master.dsl.agenda.AgendaPackage;
import org.xtext.univ.nantes.master.dsl.agenda.CONTENU;
import org.xtext.univ.nantes.master.dsl.agenda.DESCRIPTION;
import org.xtext.univ.nantes.master.dsl.agenda.EVENTS_OR_TASKS;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>CONTENU</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.univ.nantes.master.dsl.agenda.impl.CONTENUImpl#getDesc <em>Desc</em>}</li>
 *   <li>{@link org.xtext.univ.nantes.master.dsl.agenda.impl.CONTENUImpl#getEvta <em>Evta</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CONTENUImpl extends MinimalEObjectImpl.Container implements CONTENU
{
  /**
   * The cached value of the '{@link #getDesc() <em>Desc</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDesc()
   * @generated
   * @ordered
   */
  protected DESCRIPTION desc;

  /**
   * The cached value of the '{@link #getEvta() <em>Evta</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvta()
   * @generated
   * @ordered
   */
  protected EList<EVENTS_OR_TASKS> evta;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CONTENUImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AgendaPackage.Literals.CONTENU;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DESCRIPTION getDesc()
  {
    return desc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDesc(DESCRIPTION newDesc, NotificationChain msgs)
  {
    DESCRIPTION oldDesc = desc;
    desc = newDesc;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AgendaPackage.CONTENU__DESC, oldDesc, newDesc);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDesc(DESCRIPTION newDesc)
  {
    if (newDesc != desc)
    {
      NotificationChain msgs = null;
      if (desc != null)
        msgs = ((InternalEObject)desc).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AgendaPackage.CONTENU__DESC, null, msgs);
      if (newDesc != null)
        msgs = ((InternalEObject)newDesc).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AgendaPackage.CONTENU__DESC, null, msgs);
      msgs = basicSetDesc(newDesc, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AgendaPackage.CONTENU__DESC, newDesc, newDesc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<EVENTS_OR_TASKS> getEvta()
  {
    if (evta == null)
    {
      evta = new EObjectContainmentEList<EVENTS_OR_TASKS>(EVENTS_OR_TASKS.class, this, AgendaPackage.CONTENU__EVTA);
    }
    return evta;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AgendaPackage.CONTENU__DESC:
        return basicSetDesc(null, msgs);
      case AgendaPackage.CONTENU__EVTA:
        return ((InternalEList<?>)getEvta()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AgendaPackage.CONTENU__DESC:
        return getDesc();
      case AgendaPackage.CONTENU__EVTA:
        return getEvta();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AgendaPackage.CONTENU__DESC:
        setDesc((DESCRIPTION)newValue);
        return;
      case AgendaPackage.CONTENU__EVTA:
        getEvta().clear();
        getEvta().addAll((Collection<? extends EVENTS_OR_TASKS>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AgendaPackage.CONTENU__DESC:
        setDesc((DESCRIPTION)null);
        return;
      case AgendaPackage.CONTENU__EVTA:
        getEvta().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AgendaPackage.CONTENU__DESC:
        return desc != null;
      case AgendaPackage.CONTENU__EVTA:
        return evta != null && !evta.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //CONTENUImpl
