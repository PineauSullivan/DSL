/*
 * generated by Xtext 2.10.0
 */
package org.xtext.univ.nantes.master.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AgendaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MODELElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.univ.nantes.master.dsl.Agenda.MODEL");
		private final Assignment cEntiteAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntiteTYPEParserRuleCall_0 = (RuleCall)cEntiteAssignment.eContents().get(0);
		
		//MODEL:
		//	entite=TYPE;
		@Override public ParserRule getRule() { return rule; }
		
		//entite=TYPE
		public Assignment getEntiteAssignment() { return cEntiteAssignment; }
		
		//TYPE
		public RuleCall getEntiteTYPEParserRuleCall_0() { return cEntiteTYPEParserRuleCall_0; }
	}
	public class TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.univ.nantes.master.dsl.Agenda.TYPE");
		private final RuleCall cAGENDAParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TYPE:
		//	AGENDA;
		@Override public ParserRule getRule() { return rule; }
		
		//AGENDA
		public RuleCall getAGENDAParserRuleCall() { return cAGENDAParserRuleCall; }
	}
	public class AGENDAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.univ.nantes.master.dsl.Agenda.AGENDA");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgendaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDescriptionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Assignment cEventAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEventEVENTParserRuleCall_5_0 = (RuleCall)cEventAssignment_5.eContents().get(0);
		private final Assignment cTaskAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTaskTASKParserRuleCall_6_0 = (RuleCall)cTaskAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AGENDA:
		//	'Agenda' name=ID '('
		//	'Description' description=STRING
		//	event+=EVENT*
		//	task+=TASK*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Agenda' name=ID '(' 'Description' description=STRING event+=EVENT* task+=TASK* ')'
		public Group getGroup() { return cGroup; }
		
		//'Agenda'
		public Keyword getAgendaKeyword_0() { return cAgendaKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'Description'
		public Keyword getDescriptionKeyword_3() { return cDescriptionKeyword_3; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }
		
		//event+=EVENT*
		public Assignment getEventAssignment_5() { return cEventAssignment_5; }
		
		//EVENT
		public RuleCall getEventEVENTParserRuleCall_5_0() { return cEventEVENTParserRuleCall_5_0; }
		
		//task+=TASK*
		public Assignment getTaskAssignment_6() { return cTaskAssignment_6; }
		
		//TASK
		public RuleCall getTaskTASKParserRuleCall_6_0() { return cTaskTASKParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class EVENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.univ.nantes.master.dsl.Agenda.EVENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPlaceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPlaceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPlaceSTRINGTerminalRuleCall_4_0 = (RuleCall)cPlaceAssignment_4.eContents().get(0);
		private final Keyword cDateKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDateSTRINGTerminalRuleCall_6_0 = (RuleCall)cDateAssignment_6.eContents().get(0);
		private final Keyword cStartKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStartAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStartSTRINGTerminalRuleCall_8_0 = (RuleCall)cStartAssignment_8.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cEndAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cEndSTRINGTerminalRuleCall_10_0 = (RuleCall)cEndAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//EVENT:
		//	'Event' name=ID '{'
		//	'Place' place=STRING
		//	'Date' date=STRING
		//	'Start' start=STRING
		//	'End' end=STRING
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Event' name=ID '{' 'Place' place=STRING 'Date' date=STRING 'Start' start=STRING 'End' end=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'Event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'Place'
		public Keyword getPlaceKeyword_3() { return cPlaceKeyword_3; }
		
		//place=STRING
		public Assignment getPlaceAssignment_4() { return cPlaceAssignment_4; }
		
		//STRING
		public RuleCall getPlaceSTRINGTerminalRuleCall_4_0() { return cPlaceSTRINGTerminalRuleCall_4_0; }
		
		//'Date'
		public Keyword getDateKeyword_5() { return cDateKeyword_5; }
		
		//date=STRING
		public Assignment getDateAssignment_6() { return cDateAssignment_6; }
		
		//STRING
		public RuleCall getDateSTRINGTerminalRuleCall_6_0() { return cDateSTRINGTerminalRuleCall_6_0; }
		
		//'Start'
		public Keyword getStartKeyword_7() { return cStartKeyword_7; }
		
		//start=STRING
		public Assignment getStartAssignment_8() { return cStartAssignment_8; }
		
		//STRING
		public RuleCall getStartSTRINGTerminalRuleCall_8_0() { return cStartSTRINGTerminalRuleCall_8_0; }
		
		//'End'
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
		
		//end=STRING
		public Assignment getEndAssignment_10() { return cEndAssignment_10; }
		
		//STRING
		public RuleCall getEndSTRINGTerminalRuleCall_10_0() { return cEndSTRINGTerminalRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class TASKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.univ.nantes.master.dsl.Agenda.TASK");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRelatesToKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRefEventAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefEventEVENTCrossReference_2_1_0 = (CrossReference)cRefEventAssignment_2_1.eContents().get(0);
		private final RuleCall cRefEventEVENTIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRefEventEVENTCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cDeadlineKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDeadlineAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDeadlineSTRINGTerminalRuleCall_5_0 = (RuleCall)cDeadlineAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//TASK:
		//	'Task' name=ID ('relatesTo' refEvent=[EVENT])? '{'
		//	'deadline' deadline=STRING
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Task' name=ID ('relatesTo' refEvent=[EVENT])? '{' 'deadline' deadline=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'Task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('relatesTo' refEvent=[EVENT])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'relatesTo'
		public Keyword getRelatesToKeyword_2_0() { return cRelatesToKeyword_2_0; }
		
		//refEvent=[EVENT]
		public Assignment getRefEventAssignment_2_1() { return cRefEventAssignment_2_1; }
		
		//[EVENT]
		public CrossReference getRefEventEVENTCrossReference_2_1_0() { return cRefEventEVENTCrossReference_2_1_0; }
		
		//ID
		public RuleCall getRefEventEVENTIDTerminalRuleCall_2_1_0_1() { return cRefEventEVENTIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'deadline'
		public Keyword getDeadlineKeyword_4() { return cDeadlineKeyword_4; }
		
		//deadline=STRING
		public Assignment getDeadlineAssignment_5() { return cDeadlineAssignment_5; }
		
		//STRING
		public RuleCall getDeadlineSTRINGTerminalRuleCall_5_0() { return cDeadlineSTRINGTerminalRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	
	
	private final MODELElements pMODEL;
	private final TYPEElements pTYPE;
	private final AGENDAElements pAGENDA;
	private final EVENTElements pEVENT;
	private final TASKElements pTASK;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AgendaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMODEL = new MODELElements();
		this.pTYPE = new TYPEElements();
		this.pAGENDA = new AGENDAElements();
		this.pEVENT = new EVENTElements();
		this.pTASK = new TASKElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.univ.nantes.master.dsl.Agenda".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MODEL:
	//	entite=TYPE;
	public MODELElements getMODELAccess() {
		return pMODEL;
	}
	
	public ParserRule getMODELRule() {
		return getMODELAccess().getRule();
	}
	
	//TYPE:
	//	AGENDA;
	public TYPEElements getTYPEAccess() {
		return pTYPE;
	}
	
	public ParserRule getTYPERule() {
		return getTYPEAccess().getRule();
	}
	
	//AGENDA:
	//	'Agenda' name=ID '('
	//	'Description' description=STRING
	//	event+=EVENT*
	//	task+=TASK*
	//	')';
	public AGENDAElements getAGENDAAccess() {
		return pAGENDA;
	}
	
	public ParserRule getAGENDARule() {
		return getAGENDAAccess().getRule();
	}
	
	//EVENT:
	//	'Event' name=ID '{'
	//	'Place' place=STRING
	//	'Date' date=STRING
	//	'Start' start=STRING
	//	'End' end=STRING
	//	'}';
	public EVENTElements getEVENTAccess() {
		return pEVENT;
	}
	
	public ParserRule getEVENTRule() {
		return getEVENTAccess().getRule();
	}
	
	//TASK:
	//	'Task' name=ID ('relatesTo' refEvent=[EVENT])? '{'
	//	'deadline' deadline=STRING
	//	'}';
	public TASKElements getTASKAccess() {
		return pTASK;
	}
	
	public ParserRule getTASKRule() {
		return getTASKAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
