/*
 * generated by Xtext 2.10.0
 */
package org.xtext.univ.nantes.master.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AgendaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class AGENDAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.univ.nantes.master.dsl.Agenda.AGENDA");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPreamAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPreamPREAMBULEParserRuleCall_0_0 = (RuleCall)cPreamAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContenuAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContenuCONTENUParserRuleCall_2_0 = (RuleCall)cContenuAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AGENDA:
		//	(pream=PREAMBULE '(' contenu=CONTENU ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//(pream=PREAMBULE '(' contenu=CONTENU ')')?
		public Group getGroup() { return cGroup; }
		
		//pream=PREAMBULE
		public Assignment getPreamAssignment_0() { return cPreamAssignment_0; }
		
		//PREAMBULE
		public RuleCall getPreamPREAMBULEParserRuleCall_0_0() { return cPreamPREAMBULEParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//contenu=CONTENU
		public Assignment getContenuAssignment_2() { return cContenuAssignment_2; }
		
		//CONTENU
		public RuleCall getContenuCONTENUParserRuleCall_2_0() { return cContenuCONTENUParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PREAMBULEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.univ.nantes.master.dsl.Agenda.PREAMBULE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgendaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PREAMBULE:
		//	'Agenda' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Agenda' name=ID
		public Group getGroup() { return cGroup; }
		
		//'Agenda'
		public Keyword getAgendaKeyword_0() { return cAgendaKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class CONTENUElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.univ.nantes.master.dsl.Agenda.CONTENU");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescDESCRIPTIONParserRuleCall_0_0 = (RuleCall)cDescAssignment_0.eContents().get(0);
		private final Assignment cEvtaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEvtaEVENTS_OR_TASKSParserRuleCall_1_0 = (RuleCall)cEvtaAssignment_1.eContents().get(0);
		
		//CONTENU:
		//	desc=DESCRIPTION evta+=EVENTS_OR_TASKS*;
		@Override public ParserRule getRule() { return rule; }
		
		//desc=DESCRIPTION evta+=EVENTS_OR_TASKS*
		public Group getGroup() { return cGroup; }
		
		//desc=DESCRIPTION
		public Assignment getDescAssignment_0() { return cDescAssignment_0; }
		
		//DESCRIPTION
		public RuleCall getDescDESCRIPTIONParserRuleCall_0_0() { return cDescDESCRIPTIONParserRuleCall_0_0; }
		
		//evta+=EVENTS_OR_TASKS*
		public Assignment getEvtaAssignment_1() { return cEvtaAssignment_1; }
		
		//EVENTS_OR_TASKS
		public RuleCall getEvtaEVENTS_OR_TASKSParserRuleCall_1_0() { return cEvtaEVENTS_OR_TASKSParserRuleCall_1_0; }
	}
	public class DESCRIPTIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.univ.nantes.master.dsl.Agenda.DESCRIPTION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		
		//DESCRIPTION:
		//	'Description' description=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Description' description=STRING
		public Group getGroup() { return cGroup; }
		
		//'Description'
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_0() { return cDescriptionSTRINGTerminalRuleCall_1_0; }
	}
	public class EVENTS_OR_TASKSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.univ.nantes.master.dsl.Agenda.EVENTS_OR_TASKS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEvent_or_taskAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEvent_or_taskEVENTParserRuleCall_0_0 = (RuleCall)cEvent_or_taskAssignment_0.eContents().get(0);
		private final RuleCall cTASKParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EVENTS_OR_TASKS:
		//	event_or_task+=EVENT | TASK;
		@Override public ParserRule getRule() { return rule; }
		
		//event_or_task+=EVENT | TASK
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//event_or_task+=EVENT
		public Assignment getEvent_or_taskAssignment_0() { return cEvent_or_taskAssignment_0; }
		
		//EVENT
		public RuleCall getEvent_or_taskEVENTParserRuleCall_0_0() { return cEvent_or_taskEVENTParserRuleCall_0_0; }
		
		//TASK
		public RuleCall getTASKParserRuleCall_1() { return cTASKParserRuleCall_1; }
	}
	public class EVENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.univ.nantes.master.dsl.Agenda.EVENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContent_eventAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContent_eventCONTENT_EVENTParserRuleCall_3_0 = (RuleCall)cContent_eventAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EVENT:
		//	'Event' name=ID '{' content_event=CONTENT_EVENT '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Event' name=ID '{' content_event=CONTENT_EVENT '}'
		public Group getGroup() { return cGroup; }
		
		//'Event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//content_event=CONTENT_EVENT
		public Assignment getContent_eventAssignment_3() { return cContent_eventAssignment_3; }
		
		//CONTENT_EVENT
		public RuleCall getContent_eventCONTENT_EVENTParserRuleCall_3_0() { return cContent_eventCONTENT_EVENTParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CONTENT_EVENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.univ.nantes.master.dsl.Agenda.CONTENT_EVENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPlaceSTRINGTerminalRuleCall_1_0 = (RuleCall)cPlaceAssignment_1.eContents().get(0);
		private final Keyword cDateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDataAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataSTRINGTerminalRuleCall_3_0 = (RuleCall)cDataAssignment_3.eContents().get(0);
		private final Keyword cStartKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStartAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStartSTRINGTerminalRuleCall_5_0 = (RuleCall)cStartAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEndAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEndSTRINGTerminalRuleCall_7_0 = (RuleCall)cEndAssignment_7.eContents().get(0);
		
		//CONTENT_EVENT:
		//	'Place' place=STRING
		//	'Date' data=STRING
		//	'Start' start=STRING
		//	'End' end=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Place' place=STRING 'Date' data=STRING 'Start' start=STRING 'End' end=STRING
		public Group getGroup() { return cGroup; }
		
		//'Place'
		public Keyword getPlaceKeyword_0() { return cPlaceKeyword_0; }
		
		//place=STRING
		public Assignment getPlaceAssignment_1() { return cPlaceAssignment_1; }
		
		//STRING
		public RuleCall getPlaceSTRINGTerminalRuleCall_1_0() { return cPlaceSTRINGTerminalRuleCall_1_0; }
		
		//'Date'
		public Keyword getDateKeyword_2() { return cDateKeyword_2; }
		
		//data=STRING
		public Assignment getDataAssignment_3() { return cDataAssignment_3; }
		
		//STRING
		public RuleCall getDataSTRINGTerminalRuleCall_3_0() { return cDataSTRINGTerminalRuleCall_3_0; }
		
		//'Start'
		public Keyword getStartKeyword_4() { return cStartKeyword_4; }
		
		//start=STRING
		public Assignment getStartAssignment_5() { return cStartAssignment_5; }
		
		//STRING
		public RuleCall getStartSTRINGTerminalRuleCall_5_0() { return cStartSTRINGTerminalRuleCall_5_0; }
		
		//'End'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
		
		//end=STRING
		public Assignment getEndAssignment_7() { return cEndAssignment_7; }
		
		//STRING
		public RuleCall getEndSTRINGTerminalRuleCall_7_0() { return cEndSTRINGTerminalRuleCall_7_0; }
	}
	public class TASKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.univ.nantes.master.dsl.Agenda.TASK");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRelatesToKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameEventAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cNameEventEVENTCrossReference_2_1_0 = (CrossReference)cNameEventAssignment_2_1.eContents().get(0);
		private final RuleCall cNameEventEVENTIDTerminalRuleCall_2_1_0_1 = (RuleCall)cNameEventEVENTCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cDeadlineKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDeadlineAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDeadlineSTRINGTerminalRuleCall_5_0 = (RuleCall)cDeadlineAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//TASK:
		//	'Task' name=ID ('relatesTo' nameEvent=[EVENT])? '{' 'deadline' deadline=STRING '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Task' name=ID ('relatesTo' nameEvent=[EVENT])? '{' 'deadline' deadline=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'Task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('relatesTo' nameEvent=[EVENT])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'relatesTo'
		public Keyword getRelatesToKeyword_2_0() { return cRelatesToKeyword_2_0; }
		
		//nameEvent=[EVENT]
		public Assignment getNameEventAssignment_2_1() { return cNameEventAssignment_2_1; }
		
		//[EVENT]
		public CrossReference getNameEventEVENTCrossReference_2_1_0() { return cNameEventEVENTCrossReference_2_1_0; }
		
		//ID
		public RuleCall getNameEventEVENTIDTerminalRuleCall_2_1_0_1() { return cNameEventEVENTIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'deadline'
		public Keyword getDeadlineKeyword_4() { return cDeadlineKeyword_4; }
		
		//deadline=STRING
		public Assignment getDeadlineAssignment_5() { return cDeadlineAssignment_5; }
		
		//STRING
		public RuleCall getDeadlineSTRINGTerminalRuleCall_5_0() { return cDeadlineSTRINGTerminalRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	
	
	private final AGENDAElements pAGENDA;
	private final PREAMBULEElements pPREAMBULE;
	private final CONTENUElements pCONTENU;
	private final DESCRIPTIONElements pDESCRIPTION;
	private final EVENTS_OR_TASKSElements pEVENTS_OR_TASKS;
	private final EVENTElements pEVENT;
	private final CONTENT_EVENTElements pCONTENT_EVENT;
	private final TASKElements pTASK;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AgendaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAGENDA = new AGENDAElements();
		this.pPREAMBULE = new PREAMBULEElements();
		this.pCONTENU = new CONTENUElements();
		this.pDESCRIPTION = new DESCRIPTIONElements();
		this.pEVENTS_OR_TASKS = new EVENTS_OR_TASKSElements();
		this.pEVENT = new EVENTElements();
		this.pCONTENT_EVENT = new CONTENT_EVENTElements();
		this.pTASK = new TASKElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.univ.nantes.master.dsl.Agenda".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AGENDA:
	//	(pream=PREAMBULE '(' contenu=CONTENU ')')?;
	public AGENDAElements getAGENDAAccess() {
		return pAGENDA;
	}
	
	public ParserRule getAGENDARule() {
		return getAGENDAAccess().getRule();
	}
	
	//PREAMBULE:
	//	'Agenda' name=ID;
	public PREAMBULEElements getPREAMBULEAccess() {
		return pPREAMBULE;
	}
	
	public ParserRule getPREAMBULERule() {
		return getPREAMBULEAccess().getRule();
	}
	
	//CONTENU:
	//	desc=DESCRIPTION evta+=EVENTS_OR_TASKS*;
	public CONTENUElements getCONTENUAccess() {
		return pCONTENU;
	}
	
	public ParserRule getCONTENURule() {
		return getCONTENUAccess().getRule();
	}
	
	//DESCRIPTION:
	//	'Description' description=STRING;
	public DESCRIPTIONElements getDESCRIPTIONAccess() {
		return pDESCRIPTION;
	}
	
	public ParserRule getDESCRIPTIONRule() {
		return getDESCRIPTIONAccess().getRule();
	}
	
	//EVENTS_OR_TASKS:
	//	event_or_task+=EVENT | TASK;
	public EVENTS_OR_TASKSElements getEVENTS_OR_TASKSAccess() {
		return pEVENTS_OR_TASKS;
	}
	
	public ParserRule getEVENTS_OR_TASKSRule() {
		return getEVENTS_OR_TASKSAccess().getRule();
	}
	
	//EVENT:
	//	'Event' name=ID '{' content_event=CONTENT_EVENT '}';
	public EVENTElements getEVENTAccess() {
		return pEVENT;
	}
	
	public ParserRule getEVENTRule() {
		return getEVENTAccess().getRule();
	}
	
	//CONTENT_EVENT:
	//	'Place' place=STRING
	//	'Date' data=STRING
	//	'Start' start=STRING
	//	'End' end=STRING;
	public CONTENT_EVENTElements getCONTENT_EVENTAccess() {
		return pCONTENT_EVENT;
	}
	
	public ParserRule getCONTENT_EVENTRule() {
		return getCONTENT_EVENTAccess().getRule();
	}
	
	//TASK:
	//	'Task' name=ID ('relatesTo' nameEvent=[EVENT])? '{' 'deadline' deadline=STRING '}';
	public TASKElements getTASKAccess() {
		return pTASK;
	}
	
	public ParserRule getTASKRule() {
		return getTASKAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
